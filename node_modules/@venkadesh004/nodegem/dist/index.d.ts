import * as google_auth_library_build_src_auth_googleauth from 'google-auth-library/build/src/auth/googleauth';
import { AxiosResponse } from 'axios';

type ModelConfig = {
    maxOutputTokens: number;
    temperature: number;
    topP: number;
    topK: number;
    stopSequence: string[];
};

declare class NodeGem {
    private API_KEY;
    private modelName;
    private currentModel;
    private maxOutputTokens;
    private stopSequence;
    private temperature;
    private topP;
    private topK;
    safetySettings: any;
    private jwtClient;
    private authConnect;
    private gmail;
    private translate;
    private bloggerAPIKey;
    constructor(API_KEY: string, modelName: string);
    generateContent(prompt: string, stream: boolean): Promise<string>;
    switchModel(modelName: string): void;
    fileToGenerativePart(path: string, mimeType: string): {
        inlineData: {
            data: string;
            mimeType: string;
        };
    };
    useTextAndImage(imageParts: string[][], stream: boolean, prompt: string): Promise<string>;
    changeConfig({ maxOutputTokens, temperature, topP, topK, stopSequence }: ModelConfig): void;
    changeSafetySettings(input: Map<string, string>): void;
    loadSavedCredentialsIfExist(token_path: string): Promise<google_auth_library_build_src_auth_googleauth.JSONClient | null>;
    connectServiceAccount(clientKey: string, keyFile: string, privateKey: string, scopes: string[]): Promise<void>;
    saveCredentials(client: any, credentials_path: string, token_path: string): Promise<void>;
    connectAuthClient(token_path: string, credentials_path: string, scopes: string[]): Promise<void>;
    listFiles(pageSize: number): Promise<string[][] | null | undefined>;
    uploadFile(fileName: string): Promise<string | null | undefined>;
    updateFile(fileName: string, fileId: string): Promise<string | null | undefined>;
    downloadFile(fileName: string, fileId: string, listenerFunction: any): Promise<any>;
    driveAndPrompt(prompt: string, fileName: string, fileId: string): Promise<string | null>;
    returnImageBuffer(fileName: string, fileId: string): Promise<Buffer | string>;
    returnSnippet(userId: string, maxResult: number): Promise<string[]>;
    promptSnippet(userId: string, snippetID: string, prompt: string): Promise<string>;
    sendMail(from: string, to: string, subject: string, text: string, html: string, name: string, prompt: string): Promise<any>;
    translateText(text: any, targetLang: string): Promise<string>;
    getBlogData(API_KEY: string, bloggerID: string): Promise<AxiosResponse | any>;
    generateBlogContent(prompt: string | string[]): Promise<string>;
    getBlogContent(API_KEY: string, bloggerID: string, doPrompt: boolean, prompt: string): Promise<AxiosResponse | any>;
}

export { type ModelConfig, NodeGem };
